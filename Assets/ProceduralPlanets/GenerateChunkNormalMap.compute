#pragma kernel main

#include "Planet.Compute.cginc"

Texture2D<float4> _chunkSlopeAndCurvatureMap;
SamplerState sampler_chunkSlopeAndCurvatureMap;

Texture2D<float> _chunkHeightMap;
SamplerState sampler_chunkHeightMap;

float3 _rangeUnitCubePosA;
float3 _rangeUnitCubePosB;
float3 _rangeUnitCubePosC;
float3 _rangeUnitCubePosD;

float _heightMin;
float _heightMax;
int _numberOfVerticesOnEdge;
float _radiusStart;
float _chunkRadius;



float _normalLength;


RWTexture2D<float4> _chunkNormalMap;



float2 getSlope(int2 idXy, int w, int h)
{
	int3 off = int3(-1, 0, 1);
	int2 s11pos = idXy;
	s11pos = max(s11pos, int2(1, 1));
	s11pos = min(s11pos, int2(w - 2, h - 2));
	// s00 __ s10 __ s20
	//  |      |      |
	// s01 __ s11 __ s21
	//  |      |      |
	// s02 __ s12 __ s22
	float s00 = _chunkHeightMap[s11pos + off.xx].r;
	float s10 = _chunkHeightMap[s11pos + off.yx].r;
	//float s20 = _chunkHeightMap[s11pos + off.zx].r;

	float s01 = _chunkHeightMap[s11pos + off.xy].r;
	//float s11 = _chunkHeightMap[s11pos].r;
	//float s21 = _chunkHeightMap[s11pos + off.zy].r;

	//float s02 = _chunkHeightMap[s11pos + off.xz].r;
	//float s12 = _chunkHeightMap[s11pos + off.yz].r;
	//float s22 = _chunkHeightMap[s11pos + off.zz].r;

	// modified https://en.wikipedia.org/wiki/Sobel_operator
	//-1 __ 0 __ 1
	// |    |    |
	//-2 __ 0 __ 2
	// |    |    |
	//-1 __ 0 __ 1
	float sx = s10 - s00;
	//-1 __-2 __-1
	// |    |    |
	// 0 __ 0 __ 0
	// |    |    |
	// 1 __ 2 __ 1
	float sy = s01 - s00;

	return float2(sx, sy);
}




[numthreads(16, 16, 1)]
void main(uint3 id : SV_DispatchThreadID)
{
	int w, h;
	_chunkHeightMap.GetDimensions(w, h);
	float2 uv = id.xy / float2(w - 1, h - 1);

	float2 slope = getSlope(id.xy, w, h);
	float3 flatPlanetNormal = cross(
		normalize(float3(_normalLength, 0, slope.x)),
		normalize(float3(0, _normalLength, slope.y))
	);
	flatPlanetNormal = normalize(flatPlanetNormal);


	//DEBUG
	//flatPlanetNormal = float3(0,0,1);


	float3 dir, dir2;

	dir = lerp(
		lerp(_rangeUnitCubePosA, _rangeUnitCubePosB, uv.x),
		lerp(_rangeUnitCubePosD, _rangeUnitCubePosC, uv.x),
		uv.y
	);
	dir = unitCubeToUnitSphere(dir);
	float3 normal = dir;


	float theta = 0.01;


	dir2 = lerp(
		lerp(_rangeUnitCubePosA, _rangeUnitCubePosB, uv.x + theta),
		lerp(_rangeUnitCubePosD, _rangeUnitCubePosC, uv.x + theta),
		uv.y
	);
	dir2 = unitCubeToUnitSphere(dir2);
	float3 tangent = normalize(dir2 - dir); // towards x + theta
	

	dir2 = lerp(
		lerp(_rangeUnitCubePosA, _rangeUnitCubePosB, uv.x),
		lerp(_rangeUnitCubePosD, _rangeUnitCubePosC, uv.x),
		uv.y + theta
	);
	dir2 = unitCubeToUnitSphere(dir2);
	float3 binormal = normalize(dir2 - dir); // towards y + theta

	/*
	tangent = normalize(tangent - normal * dot(tangent, normal));
	tangent = cross(normal, tangent);
	// recalculate Binormal
	half3 newB = cross(normal, tangent);
	binormal = newB * sign(dot(newB, binormal));
	*/
	

	float3 modelNormal =
		flatPlanetNormal.x * tangent +
		flatPlanetNormal.y * binormal +
		flatPlanetNormal.z * normal;


	//DEBUG
	//modelNormal = float3(0.5, 0.5, 1);
	//modelNormal = float3(1, 0, 0);
	//modelNormal = normal;

	modelNormal = normalize(modelNormal);
	_chunkNormalMap[id.xy] = float4(PACK_NORMAL(modelNormal), 1);
}